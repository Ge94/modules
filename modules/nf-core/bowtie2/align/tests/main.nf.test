nextflow_process {

    name "Test Process BOWTIE2_ALIGN"
    script "../main.nf"
    process "BOWTIE2_ALIGN"
    config "./nextflow.config"

    tag "modules"
    tag "modules_nfcore"
    tag "bowtie2"
    tag "bowtie2/build"
    tag "bowtie2/align"

    setup {
        run("BOWTIE2_BUILD") {
            script "../../build/main.nf"
            process {
                """
                input[0] = Channel.of([
                            [ id:'test'],
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ])
                """
            }
        }

        run("BOWTIE2_BUILD", alias: "BOWTIE2_BUILD_LARGE") {
            script "../../build/main.nf"
            process {
                """
                input[0] = Channel.of([
                            [ id:'test'],
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ])
                """
            }
        }
    }

    // SINGLE-END TESTS

    test("sarscov2 | illumina | single-end [fastq] | [bam]") {

        when {
            params {
                bowtie2_args   = ''
                bowtie2_args2  = ''
                save_unaligned = false
                sort           = false
            }
            process {
                """
                input[0] = Channel.of([
                            [ id:'test', single_end:true ], // meta map
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true)
                ])
                input[1] = BOWTIE2_BUILD.out.index
                input[2] = Channel.of([
                            [ id:'test'],
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ])
                input[3] = params.save_unaligned
                input[4] = params.sort
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(
                    process.out.bam.collect { meta, bamfile -> bam(bamfile).getReadsMD5() },
                    process.out.log,
                    process.out.fastq,
                    process.out.versions
                ).match() }
            )
        }

    }

    test("sarscov2 | illumina | single-end [fastq] | [sam]") {

        when {
            params {
                bowtie2_args   = ''
                bowtie2_args2  = '--output-fmt SAM'
                save_unaligned = false
                sort           = false
            }
            process {
                """
                input[0] = Channel.of([
                            [ id:'test', single_end:true ], // meta map
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true)
                ])
                input[1] = BOWTIE2_BUILD.out.index
                input[2] = Channel.of([
                            [ id:'test'],
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ])
                input[3] = params.save_unaligned
                input[4] = params.sort
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(
                    process.out.sam.collect { meta, sam -> file(sam).readLines()[0..4] },
                    process.out.log,
                    process.out.fastq,
                    process.out.versions
                ).match() }
            )
        }

    }

    test("sarscov2 | illumina | single-end [fastq] | [sam]-2") {

        when {
            params {
                bowtie2_args   = ''
                bowtie2_args2  = '-O SAM'
                save_unaligned = false
                sort           = false
            }
            process {
                """
                input[0] = Channel.of([
                            [ id:'test', single_end:true ], // meta map
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true)
                ])
                input[1] = BOWTIE2_BUILD.out.index
                input[2] = Channel.of([
                            [ id:'test'],
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ])
                input[3] = params.save_unaligned
                input[4] = params.sort
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(
                    process.out.sam.collect { meta, sam -> file(sam).readLines()[0..4] },
                    process.out.log,
                    process.out.fastq,
                    process.out.versions
                ).match() }
            )
        }

    }

    test("sarscov2 | illumina | single-end [fastq] | save_unaligned | [bam]") {

        when {
            params {
                bowtie2_args   = ''
                bowtie2_args2  = ''
                save_unaligned = true
                sort           = false
            }
            process {
                """
                input[0] = Channel.of([
                            [ id:'test', single_end:true ], // meta map
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true)
                ])
                input[1] = BOWTIE2_BUILD.out.index
                input[2] = Channel.of([
                            [ id:'test'],
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ])
                input[3] = params.save_unaligned
                input[4] = params.sort
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(
                    process.out.bam.collect { meta, bamfile -> bam(bamfile).getReadsMD5() },
                    process.out.log,
                    process.out.fastq,
                    process.out.versions
                ).match() }

            )
        }

    }

    test("sarscov2 | illumina | single-end [fastq] | sort | [bam]") {

        when {
            params {
                bowtie2_args   = ''
                bowtie2_args2  = ''
                save_unaligned = false
                sort           = true
            }
            process {
                """
                input[0] = Channel.of([
                            [ id:'test', single_end:true ], // meta map
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true)
                ])
                input[1] = BOWTIE2_BUILD.out.index
                input[2] = Channel.of([
                            [ id:'test'],
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ])
                input[3] = params.save_unaligned
                input[4] = params.sort
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(
                    process.out.bam.collect { meta, bamfile -> bam(bamfile).getReadsMD5() },
                    process.out.log,
                    process.out.fastq,
                    process.out.versions
                ).match() }
            )
        }

    }

    test("sarscov2 | illumina | single-end [fastq] | large index | [bam]") {

        when {
            params {
                bowtie2_args   = ''
                bowtie2_args2  = ''
                save_unaligned = false
                sort           = false
            }
            process {
                """
                input[0] = Channel.of([
                            [ id:'test', single_end:true ], // meta map
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true)
                ])
                input[1] = BOWTIE2_BUILD_LARGE.out.index
                input[2] = Channel.of([
                            [ id:'test'],
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ])
                input[3] = params.save_unaligned
                input[4] = params.sort
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(
                    process.out.bam.collect { meta, bamfile -> bam(bamfile).getReadsMD5() },
                    process.out.log,
                    process.out.fastq,
                    process.out.versions
                ).match() }
            )
        }

    }

    test("sarscov2 | illumina | single-end [fastq] | save_unaligned | sort | [cram]") {

        when {
            params {
                bowtie2_args   = ''
                bowtie2_args2  = '--output-fmt cram --write-index'
                save_unaligned = true
                sort           = true
            }
            process {
                """
                input[0] = Channel.of([
                            [ id:'test', single_end:true ], // meta map
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true)
                ])
                input[1] = BOWTIE2_BUILD.out.index
                input[2] = Channel.of([
                            [ id:'test'],
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ])
                input[3] = params.save_unaligned
                input[4] = params.sort
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(
                    process.out.cram.collect { meta, cram -> file(cram).name },
                    process.out.crai.collect { meta, crai -> file(crai).name },
                    process.out.log,
                    process.out.fastq,
                    process.out.versions
                ).match() }
            )
        }

    }

    test("sarscov2 | illumina | single-end [fastq] | [bam] - stub") {

        options "-stub"

        when {
            params {
                bowtie2_args   = ''
                bowtie2_args2  = ''
                save_unaligned = true
                sort           = false
            }
            process {
                """
                input[0] = Channel.of([
                            [ id:'test', single_end:true ], // meta map
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true)
                ])
                input[1] = BOWTIE2_BUILD.out.index
                input[2] = Channel.of([
                            [ id:'test'],
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ])
                input[3] = params.save_unaligned
                input[4] = params.sort
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    // PAIRED-END TESTS

    test("sarscov2 | illumina | paired-end [fastq] | [bam]") {

        when {
            params {
                bowtie2_args   = ''
                bowtie2_args2  = ''
                save_unaligned = false
                sort           = false
            }
            process {
                """
                input[0] = Channel.of([
                            [ id:'test', single_end:false ], // meta map
                            [
                                file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                                file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)
                            ]
                ])
                input[1] = BOWTIE2_BUILD.out.index
                input[2] = Channel.of([
                            [ id:'test'],
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ])
                input[3] = params.save_unaligned
                input[4] = params.sort
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(
                    process.out.bam.collect { meta, bamfile -> bam(bamfile).getReadsMD5() },
                    process.out.log,
                    process.out.fastq,
                    process.out.versions
                ).match() }
            )
        }

    }

    test("sarscov2 | illumina | paired-end [fastq] | [bam] - stub") {

        options "-stub"

        when {
            params {
                bowtie2_args   = ''
                bowtie2_args2  = ''
                save_unaligned = false
                sort           = false
            }
            process {
                """
                input[0] = Channel.of([
                            [ id:'test', single_end:true ], // meta map
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true)
                ])
                input[1] = BOWTIE2_BUILD.out.index
                input[2] = Channel.of([
                            [ id:'test'],
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ])
                input[3] = params.save_unaligned
                input[4] = params.sort
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("sarscov2 | illumina | paired-end [fastq] | sort | [bam]") {

        when {
            params {
                bowtie2_args   = ''
                bowtie2_args2  = ''
                save_unaligned = false
                sort           = true
            }
            process {
                """
                input[0] = Channel.of([
                            [ id:'test', single_end:false ], // meta map
                            [
                                file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                                file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)
                            ]
                ])
                input[1] = BOWTIE2_BUILD.out.index
                input[2] = Channel.of([
                            [ id:'test'],
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ])
                input[3] = params.save_unaligned
                input[4] = params.sort
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(
                    process.out.bam.collect { meta, bamfile -> bam(bamfile).getReadsMD5() },
                    process.out.log,
                    process.out.fastq,
                    process.out.versions
                ).match() }
            )
        }

    }

    test("sarscov2 | illumina | paired-end [fastq] | save_unaligned | [bam]") {

        when {
            params {
                bowtie2_args   = ''
                bowtie2_args2  = ''
                save_unaligned = true
                sort           = false
            }
            process {
                """
                input[0] = Channel.of([
                            [ id:'test', single_end:false ], // meta map
                            [
                                file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                                file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)
                            ]
                ])
                input[1] = BOWTIE2_BUILD.out.index
                input[2] = Channel.of([
                            [ id:'test'],
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ])
                input[3] = params.save_unaligned
                input[4] = params.sort
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(
                    process.out.bam.collect { meta, bamfile -> bam(bamfile).getReadsMD5() },
                    process.out.log,
                    process.out.fastq,
                    process.out.versions
                ).match() }
            )
        }

    }

    test("sarscov2 | illumina | paired-end [fastq] | save_unaligned | sort | [cram]") {

        when {
            params {
                bowtie2_args   = ''
                bowtie2_args2  = '--output-fmt cram --write-index'
                save_unaligned = true
                sort           = true
            }
            process {
                """
                input[0] = Channel.of([
                            [ id:'test', single_end:false ], // meta map
                            [
                                file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                                file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)
                            ]
                ])
                input[1] = BOWTIE2_BUILD.out.index
                input[2] = Channel.of([
                            [ id:'test'],
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ])
                input[3] = params.save_unaligned
                input[4] = params.sort
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(
                    process.out.cram.collect { meta, cram -> file(cram).name },
                    process.out.crai.collect { meta, crai -> file(crai).name },
                    process.out.log,
                    process.out.fastq,
                    process.out.versions
                ).match() }
            )
        }

    }

    test("sarscov2 | illumina | paired-end [fastq] | large index | sort | [bam]") {

        when {
            params {
                bowtie2_args   = ''
                bowtie2_args2  = ''
                save_unaligned = false
                sort           = true
            }
            process {
                """
                input[0] = Channel.of([
                            [ id:'test', single_end:false ], // meta map
                            [
                                file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                                file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)
                            ]
                ])
                input[1] = BOWTIE2_BUILD_LARGE.out.index
                input[2] = Channel.of([
                            [ id:'test'],
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ])
                input[3] = params.save_unaligned
                input[4] = params.sort
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(
                    process.out.bam.collect { meta, bamfile -> bam(bamfile).getReadsMD5() },
                    process.out.log,
                    process.out.fastq,
                    process.out.versions
                ).match() }
            )
        }

    }

}
